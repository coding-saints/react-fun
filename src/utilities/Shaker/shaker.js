/*

First, we extract the file we want to shake from the process.argv and read it from the filesystem. We pass the file contents using the acorn#parse API.
We have decls, calledDecls, and code.
decls holds all declarations function and variable. calledDecls holds the name of the declaration that was used. code holds the code of other AST that is not a declaration.
We looped through the body, which the AST generated by the acorn#parse method. In the forEach loop we have a callback function, inside it we checked to capture function and variable declarations, that we put in the decls Map.
Then, we checked for when the declarations are used by checking for CallExpression and Identifier. CallExpression denotes a function call, that we know it is calling a function declaration. An Identifier is referring to a variable declaration.
At last, we just generate the node JS code and push it to the code array.
After the forEach loop, we got the declarations of the used declarations from the decls Map, we used the concat method the merge the code array and declarations, then used join to join them in a string.
The resulting code is written to test.shaked.js.
Letâ€™s shake some code



*/

const acorn = require("acorn")
const l = console.log
const JSEmitter = require('./jsemitter')
const fs = require('fs')
// pull in the cmd line args
const args = process.argv[2]
const buffer = fs.readFileSync(args).toString()
const body = acorn.parse(buffer).body
const jsEmitter = new JSEmitter()
let decls = new Map()
let calledDecls = []
let code = []
body.forEach(function(node) {
    if (node.type == "FunctionDeclaration") {
        const code = jsEmitter.run([node])
        decls.set(jsEmitter.visitNode(node.id), code)
        return;
    }
    if (node.type == "ExpressionStatement") {
        if (node.expression.type == "CallExpression") {
            const callNode = node.expression
            calledDecls.push(jsEmitter.visitIdentifier(callNode.callee))
            const args = callNode.arguments
            for (const arg of args) {
                if (arg.type == "Identifier") {
                    calledDecls.push(jsEmitter.visitNode(arg))
                }
            }
        }
    }
    if (node.type == "VariableDeclaration") {
        const kind = node.kind
        for (const decl of node.declarations) {
            decls.set(jsEmitter.visitNode(decl.id), jsEmitter.visitVariableDeclarator(decl, kind))
        }
        return
    }
    if (node.type == "Identifier") {
        calledDecls.push(node.name)
    }
    code.push(jsEmitter.run([node]))
});
code = calledDecls.map(c => {
    return decls.get(c)
}).concat([code]).join('')
fs.writeFileSync('test/test.shaked.js', code)